#include <iostream>
#include <SDL_image.h>
#include "Tetrads.h"

// Type : Square = 0, I = 1, L = 2, L-mirr = 3, N = 4, N-mirr = 5, T = 6
// Rotation : clockwise (0->1->2->3)
short tetrads[TYPE][ROTATION][HORIZONTAL][VERTICAL] =
{
	// Square block
	{
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 1, 1, 0 },
			{ 0, 0, 1, 1, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 1, 1, 0 },
			{ 0, 0, 1, 1, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 1, 1, 0 },
			{ 0, 0, 1, 1, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 1, 1, 0 },
			{ 0, 0, 1, 1, 0 },
			{ 0, 0, 0, 0, 0 }
		}
	},
	// I block
	{
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 2, 2, 2, 2 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 2, 0, 0 },
			{ 0, 0, 2, 0, 0 },
			{ 0, 0, 2, 0, 0 },
			{ 0, 0, 2, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 2, 2, 2, 2, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 2, 0, 0 },
			{ 0, 0, 2, 0, 0 },
			{ 0, 0, 2, 0, 0 },
			{ 0, 0, 2, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		}
	},
	// L block
	{
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 3, 0, 0 },
			{ 0, 0, 3, 0, 0 },
			{ 0, 0, 3, 3, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 3, 3, 3, 0 },
			{ 0, 3, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 3, 3, 0, 0 },
			{ 0, 0, 3, 0, 0 },
			{ 0, 0, 3, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 3, 0 },
			{ 0, 3, 3, 3, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		}
	},
	// L-mirrored block
	{
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 4, 0, 0 },
			{ 0, 0, 4, 0, 0 },
			{ 0, 4, 4, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 4, 0, 0, 0 },
			{ 0, 4, 4, 4, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 4, 4, 0 },
			{ 0, 0, 4, 0, 0 },
			{ 0, 0, 4, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 4, 4, 4, 0 },
			{ 0, 0, 0, 4, 0 },
			{ 0, 0, 0, 0, 0 }
		}
	},
	// N block
	{
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 5, 0 },
			{ 0, 0, 5, 5, 0 },
			{ 0, 0, 5, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 5, 5, 0, 0 },
			{ 0, 0, 5, 5, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 5, 0, 0 },
			{ 0, 5, 5, 0, 0 },
			{ 0, 5, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 5, 5, 0, 0 },
			{ 0, 0, 5, 5, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		}
	},
	// N-mirrored block
	{
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 6, 0, 0 },
			{ 0, 0, 6, 6, 0 },
			{ 0, 0, 0, 6, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 6, 6, 0 },
			{ 0, 6, 6, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 6, 0, 0, 0 },
			{ 0, 6, 6, 0, 0 },
			{ 0, 0, 6, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 6, 6, 0 },
			{ 0, 6, 6, 0, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		}
	},
	// T block
	{
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 7, 0, 0 },
			{ 0, 0, 7, 7, 0 },
			{ 0, 0, 7, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 7, 7, 7, 0 },
			{ 0, 0, 7, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 7, 0, 0 },
			{ 0, 7, 7, 0, 0 },
			{ 0, 0, 7, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		},
		{
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 7, 0, 0 },
			{ 0, 7, 7, 7, 0 },
			{ 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0 }
		}
	}
};

//start row & start X
short startingRow[TYPE][ROTATION][1] =
{
	// Square block
	{
		{ 3 },{ 3 },{ 3 },{ 3 }
	},
	// I block
	{
		{ 2 },{ 4 },{ 2 },{ 3 }
	},
	// L block
	{
		{ 3 },{ 3 },{ 3 },{ 2 }
	},
	// L-mirrored block
	{
		{ 3 },{ 2 },{ 3 },{ 3 }
	},
	// N block
	{
		{ 3 },{ 3 },{ 3 },{ 2 }
	},
	// N-mirrored block
	{
		{ 3 },{ 3 },{ 3 },{ 2 }
	},
	// T block
	{
		{ 3 },{ 3 },{ 3 },{ 2 }
	}
};

Tetrads::Tetrads(int type, int rotation) 
{
	curX_ = 5;
	curY_ = (-1) * startingRow[type][rotation][0];
	type_ = type;
	rotation_ = rotation;
	
	for (int i = 0; i < HORIZONTAL; i++)
	{
		for (int j = 0; j < VERTICAL; j++)
			tetrad_[i][j] = tetrads[type_][rotation_][i][j];
	}
}

Tetrads::~Tetrads() 
{

}

void Tetrads::pollEvents(SDL_Event& event) 
{
	if (event.type == SDL_KEYDOWN) 
	{
		switch (event.key.keysym.sym) 
		{
			case SDLK_LEFT:
				curX_ -= 1;
				break;
			case SDLK_RIGHT:
				curX_ += 1;
				break;
			case SDLK_UP:
				if (rotation_ == 3)
					rotation_ = 0;
				else
					rotation_ += 1;
				break;
			case SDLK_DOWN:
				curY_ += 1;
				break;
		}
	} 
}

void Tetrads::movedownTedrads()
{
	curY_ += 1;
}

void Tetrads::updateTedrads()
{
	for (int i = 0; i < HORIZONTAL; i++)
	{
		for (int j = 0; j < VERTICAL; j++)
			tetrad_[i][j] = tetrads[type_][rotation_][i][j];
	}
}
