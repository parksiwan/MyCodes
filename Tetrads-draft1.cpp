#include <iostream>
#include <SDL_image.h>
#include "Tetrads.h"

const short TYPE = 7;
const short ROTATION = 4;
const short HORIZONTAL = 5;
const short VERTICAL = 5;

// Type : Square = 0, I = 1, L = 2, L-mirr = 3, N = 4, N-mirr = 5, T = 6
// Rotation : clockwise (0->1->2->3)
char tetrads[TYPE][ROTATION][HORIZONTAL][VERTICAL] =
{
	// Square block
	{
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '2', '1', '0' },
			{ '0', '0', '1', '1', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '2', '1', '0' },
			{ '0', '0', '1', '1', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '2', '1', '0' },
			{ '0', '0', '1', '1', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '2', '1', '0' },
			{ '0', '0', '1', '1', '0' },
			{ '0', '0', '0', '0', '0' }
		}
	},
	// I block
	{
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '1', '2', '1', '1' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '2', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '1', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '1', '1', '2', '1', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '2', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		}
	},
	// L block
	{
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '2', '0', '0' },
			{ '0', '0', '1', '1', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '1', '2', '1', '0' },
			{ '0', '1', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '1', '1', '0', '0' },
			{ '0', '0', '2', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '1', '0' },
			{ '0', '1', '2', '1', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		}
	},
	// L-mirrored block
	{
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '2', '0', '0' },
			{ '0', '1', '1', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '1', '0', '0', '0' },
			{ '0', '1', '2', '1', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '1', '1', '0' },
			{ '0', '0', '2', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '1', '2', '1', '0' },
			{ '0', '0', '0', '1', '0' },
			{ '0', '0', '0', '0', '0' }
		}
	},
	// N block
	{
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '1', '0' },
			{ '0', '0', '2', '1', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '1', '2', '0', '0' },
			{ '0', '0', '1', '1', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '1', '2', '0', '0' },
			{ '0', '1', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '1', '1', '0', '0' },
			{ '0', '0', '2', '1', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		}
	},
	// N-mirrored block
	{
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '2', '1', '0' },
			{ '0', '0', '0', '1', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '2', '1', '0' },
			{ '0', '1', '1', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '1', '0', '0', '0' },
			{ '0', '1', '2', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '1', '1', '0' },
			{ '0', '1', '2', '0', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		}
	},
	// T block
	{
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '2', '1', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '1', '2', '1', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '1', '2', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		},
		{
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '1', '0', '0' },
			{ '0', '1', '2', '1', '0' },
			{ '0', '0', '0', '0', '0' },
			{ '0', '0', '0', '0', '0' }
		}
	}
};

Tetrads::Tetrads(const Window& window, int w, int h, int x, int y, 
	             int r, int g, int b, int type, int rotation) :
				 Window(window), w_(w), h_(h), x_(x), y_(y), r_(r), g_(g), b_(b), type_(type), rotation_(rotation)
{

}

Tetrads::Tetrads(const Window& window, int w, int h, int x, int y, 
	             const std::string& image_path, int type, int rotation) :
				 Window(window), w_(w), h_(h), x_(x), y_(y), type_(type), rotation_(rotation)
{
	auto surface = IMG_Load(image_path.c_str());
	
	if (!surface) 
		std::cerr << "Failed to create surface" << std::endl;

	tennis_texture_ = SDL_CreateTextureFromSurface(renderer_, surface);

	if (!tennis_texture_)
		std::cerr << "Failed to create texture" << std::endl;
	
	SDL_FreeSurface(surface);
}

Tetrads::~Tetrads() 
{
	SDL_DestroyTexture(tennis_texture_);
}

void Tetrads::draw()
{
	if (tennis_texture_)
	{
		for (int i = 0; i < 5; i++)
		{
			for (int j = 0; j < 5; j++)
			{
				if (tetrads[type_][rotation_][i][j] == '1' || tetrads[type_][rotation_][i][j] == '2')
				{
					//each "ttRect" consists of a Tetrad
					SDL_Rect ttRect = { x_ + j * 20, y_ + i * 20, w_, h_ };
					SDL_RenderCopy(renderer_, tennis_texture_, nullptr, &ttRect);
				}
				tetrad_[i][j] = tetrads[type_][rotation_][i][j];
			}
		}
	}
	else 
	{
		SDL_SetRenderDrawColor(renderer_, r_, g_, b_, a_);
		//SDL_RenderFillRect(renderer_, &ttRect);
	}
	
}

void Tetrads::pollEvents(SDL_Event& event) 
{
	if (event.type == SDL_KEYDOWN) 
	{
		switch (event.key.keysym.sym) 
		{
			case SDLK_LEFT:
				x_ -= 20;
				break;
			case SDLK_RIGHT:
				x_ += 20;
				break;
			case SDLK_UP:
				if (rotation_ == 3)
					rotation_ = 0;
				else
					rotation_ += 1;
				break;
			case SDLK_DOWN:
				y_ += 10;
				break;
		}
	} 
}

void Tetrads::moveDown() 
{
	y_ += 20;
}

void Tetrads::rotateDown()
{
	y_ += 10;
}
