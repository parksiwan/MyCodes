//
//Source file : Tetrads.cpp
//Purpose     : Definition of member functions of Tetrads class 
//Features    : Creates & kills a tatrad and moves & updates different shapes of a tetrad
//
#include <iostream>
#include <SDL_image.h>
#include "Tetrads.h"

//Constructor of Tetrads class. Creates a tetrad shape using type and rotation
//@param type : one of 7 types of tetrads
//@param rotation : one of 4 different rotated shapes
Tetrads::Tetrads(int type, int rotation) {
	curX_ = 3;                                       //x coordination of far-left of 5x5 array(tetrad_)
	curY_ = (-1) * startingRow[type][rotation][0];   //y coordination of first row that starts to be displayed on the field
	type_ = type;
	rotation_ = rotation;
	
	//copy a shape of tetrad into 5x5 array
	for (int i = 0; i < HORIZONTAL; i++)
		for (int j = 0; j < VERTICAL; j++)
			tetrad_[i][j] = tetrads[type_][rotation_][i][j];
	
	//copy outer points of each face of a tatrad
	downEdge_ = edgeLine[type_][rotation_][0];
	leftEdge_ = edgeLine[type_][rotation_][1];
	rightEdge_ = edgeLine[type_][rotation_][2];
	upEdge_ = edgeLine[type_][rotation_][3];
}

//Polls for pending events generated by user
//@param event : reference to SDL_Event struct
void Tetrads::pollEvents(SDL_Event& event) {
	if (event.type == SDL_KEYDOWN) {
		switch (event.key.keysym.sym) {
			case SDLK_LEFT:                 //left arrow key
				curX_ -= 1;
				direction_ = LEFT;
				break;
			case SDLK_RIGHT:                //right arrow key
				curX_ += 1;
				direction_ = RIGHT;
				break;
			case SDLK_UP:                   //up arrow key
				if (rotation_ == 3)
					rotation_ = 0;
				else
					rotation_ += 1;
				break;
			case SDLK_DOWN:                 //down arrow key
				if (rotation_ == 0)
					rotation_ = 3;
				else
					rotation_ -= 1;
				break;
			case SDLK_SPACE:                //space bar key
				//drop down
				curY_ += 1;
				direction_ = DDOWN;
				break;
			case SDLK_ESCAPE:               //Esc key
				ended_ = true;
				break;
		}
	} 
}

//Moves down a tetrad when no input events are generated
void Tetrads::movedownTedrads() {
	curY_ += 1;
	direction_ = DOWN;
}

//Updates the tetrad based on input events
void Tetrads::updateTedrads() {
	//copy changed tetrad into 5x5 array
	for (int i = 0; i < HORIZONTAL; i++)
		for (int j = 0; j < VERTICAL; j++)
			tetrad_[i][j] = tetrads[type_][rotation_][i][j];

	//copy outer points of each face of a tatrad
	downEdge_  = edgeLine[type_][rotation_][0];
	leftEdge_  = edgeLine[type_][rotation_][1];
	rightEdge_ = edgeLine[type_][rotation_][2];
	upEdge_    = edgeLine[type_][rotation_][3];
}

//returns true if a tetrad finished its life
//either when it reaches the bottom/other tetrad or receives close event
bool Tetrads::isEnded() {
	if (ended_ == true || curY_ == 20)
		return true;

	return false;
}

