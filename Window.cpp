//
//Source file : Window.cpp
//Purpose     : Definition of member functions of Window class 
//Features    : Creates & closes main window, gets user key input and updates window screen
//
#include <iostream>
#include <SDL_image.h>
#include <SDL_ttf.h>
#include "Window.h"

//Constructor of Window class. Creates main window
//@param title : title of window
//@param width : width of window
//@param height: height of window
Window::Window(const std::string& title, int width, int height) {
	title_ = title;
	width_ = width;
	height_ = height;

	try {
		if (SDL_Init(SDL_INIT_VIDEO) != 0)
			throw 1;
	} catch (int e) {
		std::cerr << "Failed to initialize SDL" << std::endl;
		closed_ = true;
	}

	try {
		if (IMG_Init(IMG_INIT_PNG) != IMG_INIT_PNG) 
			throw 1;
	} catch (int e) {
		std::cerr << "Failed to initialize SDL" << std::endl;
		closed_ = true;
	}

	try {
		if (TTF_Init() != 0)
			throw 1;
	} catch (int e) {
		std::cerr << "Failed to initialize TTF" << std::endl;
		closed_ = true;
	}
		
	try {
		window_ = SDL_CreateWindow(title_.c_str(), SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, width_, height_, 0);
		if (window_ == nullptr)
			throw 1;
	} catch (int e) {
		std::cerr << "Failed to create window" << std::endl;
		closed_ = true;
	}
		
	try {
		renderer_ = SDL_CreateRenderer(window_, -1, SDL_RENDERER_ACCELERATED);
		if (renderer_ == nullptr) 
			throw 1;
	} catch (int e) {
		std::cerr << "Failed to create renderer." << std::endl;
		closed_ = true;
	}

	closed_ = false;
}

//Destructor of Window class. Closes main window and clears related SDL tasks
Window::~Window() {
	SDL_DestroyRenderer(renderer_);
	SDL_DestroyWindow(window_);
	TTF_Quit();
	IMG_Quit();
	SDL_Quit();
}

//Polls for pending events generated by user
//@param event : reference to SDL_Event struct
void Window::pollEvents(SDL_Event& event) {
	switch (event.type) {
		case SDL_QUIT:                           //close button on window
			closed_ = true;
			break;
		case SDL_KEYDOWN:                       
			switch (event.key.keysym.sym) {
			case SDLK_ESCAPE:                    //Esc key
				closed_ = true;
				break;
			case SDLK_s:                         //'s' key
				inputMessage_ = START;
				break;
			case SDLK_r:                         //'r' key
				inputMessage_ = RESTART; 
				break;
			case SDLK_e:                         //'e' key
				inputMessage_ = EXIT;
				break;
			default:
				break;
			}
		default:
			break;
	}
}

//updates the screen with rendering and clears it
void Window::clear() const {
	SDL_RenderPresent(renderer_);                           //updates the screen with any rendering performed so far
	SDL_SetRenderDrawColor(renderer_, 165, 105, 189, 255);  //sets the color used for drawing operation
	SDL_RenderClear(renderer_);                             //clears rendering target
}

//returns the message input by user
int Window::getInputMessage() {
	return inputMessage_;
}
